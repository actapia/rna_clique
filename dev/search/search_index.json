{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RNA-clique","text":"<p>This is the repository for RNA-clique, a tool for computing pairwise genetic distances from RNA-seq data. The software accepts as input assembled transcriptomes from two or more samples and produces as its output a matrix containing pairwise distances ranging from 0 to 1.</p>"},{"location":"#installation","title":"Installation","text":"<p>This software is written in Python, Perl, and Bash. The software additionally requires NCBI BLAST+ and several Python and Perl libraries. The section below lists the software requirements, and guides are provided for installation of specific systems.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>The requirements below represent one tested configuration. This software may work with different versions of the dependencies listed, but such configurations are considered untested.</p>"},{"location":"#main-software","title":"Main software","text":"<ul> <li>Python 3.12</li> <li>Perl 5.40.1</li> <li>Bash 5.2.37</li> <li>ncbi-blast 2.16.0+</li> <li>Python libraries</li> <li>tqdm 4.66.5</li> <li>pandas 2.2.2</li> <li>pytables 3.10.1</li> <li>joblib 1.4.2</li> <li>networkx 3.3</li> <li>simple-blast 0.7.0</li> <li>Perl libraries</li> <li>Bio::SeqIO 1.7.8</li> </ul>"},{"location":"#phylogenetics-and-visualization","title":"Phylogenetics and Visualization","text":"<ul> <li>Python libraries</li> <li>BioPython 1.84</li> <li>matplotlib 3.9.2</li> <li>seaborn 0.13.2</li> <li>scikit-bio 0.6.2</li> </ul>"},{"location":"#sequence-simulation-needed-for-testing-installation","title":"Sequence simulation (needed for testing installation)","text":"<ul> <li>Python libraries</li> <li>more-itertools 10.4.0</li> <li>PyYAML 6.0.2</li> <li>SciPy 1.14.1</li> </ul>"},{"location":"#installation-guides","title":"Installation guides","text":"<ul> <li>Ubuntu</li> <li>macOS</li> </ul>"},{"location":"#testing-the-installation","title":"Testing the installation","text":"<p>After you have downloaded RNA-clique and installed its dependencies, you can test your installation using a script included in this repository.</p> <p>First, make sure your rna-clique conda environment is active.</p> <pre><code>conda activate rna-clique\n</code></pre> <p>Then, if you are in the root the repository, you can run the following command to begin the test script.</p> <pre><code>bash tests/verify_install/test_install.sh &amp;&amp; echo \"Success!\"\n</code></pre> <p>The script generates a small test dataset and runs RNA-clique on the generated data. On a modern desktop with one thread, the test should take around one minute to complete. On machines with multiple threads, the test script should take advantage of parallelism to complete the test more quickly.</p> <p>If you ran the script with the above command and see \"Success!,\" then the installation was succesful. Otherwise, you will need to investigate the output of the test script to see what failed and why.</p> <p>If the test script fails despite having a correct installation, you should submit a bug report on GitHub at https://github.com/actapia/rna_clique/issues .</p>"},{"location":"#command-line-usage","title":"Command-line usage","text":"<p>Running RNA-clique broadly involves two phases. In the first phase, the transcriptomes are aligned, and the gene matches graph is built. In the second phase, the gene matches graph is used to filter the BLAST alignments, and the pairwise distances are calculated using the filtered alignment statistics.</p> <p>Although there are only two phases, each phase may be performed by multiple scripts. To simplify usage of this program, we have provided a script, <code>typical_filtering_step.sh</code> that may be used to easily perform the first phase with typical parameter settings.</p>"},{"location":"#phase-1-building-the-gene-matches-graph","title":"Phase 1: Building the gene matches graph","text":"<p>The simplest usage of <code>typical_filtering_step.sh</code> provides only an output directory, a value for the number of top genes to select (<code>n</code>), and the directories containing the transcriptomes to be analyzed.</p> <p>The script assumes that the transcriptomes are stored in FASTA files with the identical names in different directories. By default, RNA-clique assumes the files are all named <code>transcripts.fasta</code>, since this is the default output name for the SPAdes assembler, but this behavior may be overridden by a command-line argument. </p> <p>For example, the first transcriptome might be located at <code>sample1/transcripts.fasta</code>, and the second might be located at<code>sample2/assembly.fasta</code>.</p> <p>WARNING: The transcriptomes are identified internally by the names of the directories in which they are contained, so every transcriptome must be located in a directory with a unique name!</p> <pre><code>bash typical_filtering_step.sh -n TOP_GENES -o OUTPUT_DIR DIR1 DIR2 ...\n</code></pre> <p>In the command above, <code>TOP_GENES</code> must be replaced by the number of top genes to select. <code>OUTPUT_DIR</code> should be replaced by the path to the directory in which to store output files. <code>DIR1 DIR2 ...</code> are the paths to the directories containing the transcriptomes to be analyzed. The transcriptomes are assumed be located at files named <code>transcripts.fasta</code> within those directories.</p> <p>When the script finishes, it creates <code>graph.pkl</code> in the specified output directory. <code>graph.pkl</code> is a Python pickle file representing the constructed gene matches graph.</p> <p>The script also stores HDF5 files (formerly Python pickles) for the pairwise BLAST results. The BLAST results can be found in the <code>od2</code> subdirectory of the output directory.</p>"},{"location":"#phase-2-calculating-distances","title":"Phase 2: Calculating distances","text":"<p>The <code>filtered_distance.py</code> Python script may be used to compute distances or similarities from a gene matches graph. Basic usage of the command requires only that we provide the pickles for the gene matches graph and the HDF5 files for the pairwise BLAST results.</p> <pre><code>python filtered_distance.py -g GRAPH -c COMPARISONS_DIR/*.h5\n</code></pre> <p>In the above command, GRAPH should be the path to the <code>graph.pkl</code> created in the first phase, and COMPARISONS_DIR should be the directory that contains the BLAST result HDF5 files. (This will be the <code>od2</code> subdirectory of the output directory from Phase 1 if you used the <code>typical_filtering_step.sh</code> script.)</p> <p>The script outputs a genetic similarity matrix to standard output by default. To get a distance matrix, you can provide the <code>-o dis</code> option to <code>filtered_distance.py</code>.</p> <p>Both the rows and the columns of the matrix are sorted alphabetically by sample ID. To print the order of the samples to standard error, you can provide the <code>-l</code> flag to <code>filtered_distance.py</code>.</p>"},{"location":"#downstream-analyses","title":"Downstream analyses","text":"<p>The <code>filtered_distance.py</code> script prints the calculated matrix to the standard output, so you can use redirection or pipes to save the results to a file. You could then use the matrix in any downstream application capable of loading arbitrary matrices from files.</p> <p>For example, if you output the matrix to a file named <code>distances</code>, you could load the matrix in R using the following code:</p> <pre><code>dis &lt;- as.matrix(read.table(\"distances\", sep=\" \"))\n</code></pre> <p>If you are using Python, you may wish to skip Phase 2 and use RNA-clique directly in your code instead.</p>"},{"location":"#using-rna-clique-in-python-code","title":"Using RNA-clique in Python code","text":"<p>Since parts of Phase 1 are implemented in Bash and Perl, there is currently no official way to perform Phase 1 from custom Python code, but since Phase 2 is written exclusively in Python, we describe an official way of performing that phase in custom code here.</p> <p>The <code>filtered_distance.py</code> is a straightforward command-line interface to RNA-clique's <code>SampleSimilarity</code> class. If you are planning to use the distance matrix computed by RNA-clique in a downstream analysis implemented in Python, it may be easier to simply use <code>SampleSimilarity</code> directly instead of running <code>filtered_distance.py</code> and loading the calculated matrix back into Python.</p> <p>The <code>SampleSimilarity</code> class is ordinarily constructed with the following arguments:</p> <ul> <li>A NetworkX graph representing the gene matches graph.</li> <li>An Iterable of pairs to be interpreted as a mapping between unordered pairs    of sample names and dataframes containing the parsed BLAST results for the    pairs' comparisons. (For example, if you had a <code>dict</code> <code>d</code> mapping    <code>frozenset</code>s containing pairs of sample names to the BLAST results for those    pairs of samples, then <code>d.items()</code> would be an appropriate actual parameter.)</li> <li>An optional integer indicating how many samples are present. (If no value is    provided for this parameter, it will be calculated automatically.)</li> </ul> <p>This constructor may be difficult to use if you are simply given the file paths to the pickles for the graph and the BLAST comparisons, so <code>SampleSimilarity</code> also includes a <code>from_filenames</code> classmethod that constructs a <code>SampleSimilarity</code> object using the following parameters:</p> <ul> <li>A path to the pickle containing the gene matches graph.</li> <li>A list of paths to the BLAST comparisons.</li> <li>An optional <code>bool</code> indicating whether to keep the comparison dataframes after   the distance computation has finished.</li> </ul> <p><code>SampleSimilarity</code> computes the similarities lazily; it won't do any of the time-consuming work until it's asked for results. <code>SampleSimilarity</code> offers several ways to view the results.</p> <p><code>get_similarities</code> and <code>get_dissimilarities</code> return a <code>MultisetKeyDict</code> that maps unordered pairs of sample names to their similarities or dissimilarities (distances), respectively. The <code>MultisetKeyDict</code> for the  similarities may also be accessed via the <code>similarities</code> property, but note that there is no corresponding <code>dissimilarities</code> or <code>distances</code> property.</p> <p><code>get_similarity_matrix</code> and <code>get_dissimilarity_matrix</code> offer the same information as matrices\u2014i.e., NumPy arrays. The returned matrices are symmetric, but the distances are only computed in one direction by RNA-clique. The rows and columns of the matrix correspond to the samples sorted alphabetically by name. To get this ordered list of samples, you can use the <code>samples</code> property of <code>SampleSimilarity</code>.</p>"},{"location":"#license","title":"License","text":"<p>All code except tests/test_install/macos.sh is licensed under the MIT license, which may be found at LICENSE.MIT at the root of this repository.</p> <p>tests/test_install/macos.sh is licensed under the Creative Commons Attribution-ShareAlike 4.0 License, which may be found at LICENSE.CC-BY-SA-4.0 at the root of this repository.</p> <p>A machine-readable copyright file in Debian format may also be found at copyright.</p>"},{"location":"#additional-documentation","title":"Additional documentation","text":"<ul> <li>Command-line usage guide</li> <li>Tutorial: From RNA-seq reads to a phylogenetic tree with RNA-clique</li> </ul>"},{"location":"usage/","title":"Command line script usage","text":"<p>This document explains how to use each of the scripts that are part of RNA-clique. Short help messages can also be printed for most of these scripts by providing the scripts with the <code>--help</code> option.</p>"},{"location":"usage/#build_graphpy","title":"build_graph.py","text":"<p>This script builds the gene matches graph from gene matches tables.</p>"},{"location":"usage/#options","title":"Options","text":"Short name Long name Description Default Required <code>-h</code> <code>--help</code> Print a help message and exit. No <code>-i</code> Gene matches table HDF5 or pickle files. Yes <code>-o</code> Output gene matches graph pickle. Yes"},{"location":"usage/#do_filtering_stepsh","title":"do_filtering_step.sh","text":"<p>This script automates \"phase 1\" of RNA-clique in which the following steps occur:</p> <ol> <li>The top \\(n\\) genes for each sample are selected by \\(k\\)-mer coverage.</li> <li>The gene matches tables are found by executing a BLAST search for each pair    of samples in both directions. (That is, for samples \\(a\\) and \\(b\\), we BLAST    both \\(a\\) vs. \\(b\\) and \\(b\\) vs. \\(a\\).)</li> <li>The gene matches graph is constructed from the gene matches tables.</li> </ol> <p>This script offers many command line options for controlling the behavior of RNA-clique. For most analyses, most of these options are probably unnecessary. Hence, it is recommended to use the <code>typical_filtering_step.sh</code> script instead unless fine-grained control is needed.</p>"},{"location":"usage/#positional-arguments","title":"Positional arguments","text":"Argument name Description <code>DIR ...</code> Each argument is a directory containing a transcripts FASTA file to be analyzed (<code>transcripts.fasta</code>, by default)."},{"location":"usage/#options_1","title":"Options","text":"Option name Description Default Required <code>--cache-dir</code> Directory in which to store BLAST DBs for top \\(n\\) genes. No <code>--evalue</code> e-value cutoff to use for BLAST searches <code>1e-99</code> (\\(10^{-99}\\)) No <code>--gene-regex</code> Python regex used to extract gene and isoform IDs from FASTA sequence headers. <code>^.*g([0-9]+)_i([0-9]+)</code> No <code>--help</code> Display a help message and quit. false No <code>--jobs</code> Number of parallel jobs to use. 1 No <code>--keep-all</code> Whether to keep all matches in the case of a tie in the last step of creating the gene matches table. false No <code>-N</code> A match between genes is counted if it is among the top \\(N\\) in both directions. 1 No <code>-n</code> Number of top genes to select by \\(k\\)-mer coverage. 10000 No <code>--out-dir-1</code> Directory in which to store top \\(n\\) genes for each sample. Yes <code>--out-dir-2</code> Directory in which to store gene matches tables. Yes <code>--output-graph</code> Path to output graph pickle. Yes <code>--pattern</code> Perl regex used to extract \\(k\\)-mer coverage from FASTA sequence header lines. <code>^.*cov_([0-9]+(?:\\.[0-9]+))_g([0-9]+)_i([0-9]+)</code> No <code>--sample-regex</code> Python regex used to extract sample names from directory names. <code>^(.*?)_.*$</code> No <code>--transcripts</code> Name of the FASTA files containing transcirpts in the input directories. <code>transcripts.fasta</code> No"},{"location":"usage/#gene-regex","title":"gene-regex","text":"<p>The <code>gene-regex</code> option should be a Python regular expression that can be used to parse the FASTA sequence header lines of the transcript FASTA files. The following capture groups are expected:</p> Capture group Description 1 Gene ID, a non-negative integer 2 Isoform ID, a non-negative integer"},{"location":"usage/#keep-all","title":"keep-all","text":"<p>The last step in creating a gene matches table is selecting the top gene pair for each sample 1 gene by bitscore. By default, this step produces a table such that every sample 1 gene in the table is implicitly mapped to a single best match in sample 2. If for some sample 1 gene there are multiple gene pairs with highest bitscore, ties are broken by keeping only the row that comes first in the table.</p> <p>When the <code>--keep-all</code> flag is provided, more than one gene pair may be kept for a sample 1 gene in the case of ties.</p>"},{"location":"usage/#n-big-n","title":"N (big N)","text":"<p>When comparing sample \\(A\\) and sample \\(V\\), we BLAST \\(A\\) against \\(B\\) and \\(B\\) against \\(A\\). Ordinarily, we keep a pair of genes \\(g\\) (from \\(a\\)) and \\(h\\) (from \\(b\\)) when merging the results from the two directions if and only if \\(g\\) is among the best matches for \\(h\\) in \\(A\\), and \\(h\\) is among the best matches for \\(g\\) in \\(B\\), according to bitscore. (We allow ties, so \\(h\\) may not be the only best match for \\(g\\) in \\(B\\), and, likewise, \\(g\\) may not be the only best match for \\(h\\) in \\(A\\).) This behavior corresponds to a parameter setting of \\(N = 1\\) because we are consider only the matches with top \\(N = 1\\) bitscore in both directions.</p> <p>We could alternatively set \\(N\\) to some value greater than 1. In that case, when we merge the two directions, we could keep a pair of genes \\(g\\) and \\(h\\) if and only if \\(g\\) is among the matches with top \\(N\\) bitscore for \\(h\\) in \\(A\\), and \\(h\\) is among the matches with top \\(N\\) bitscore for \\(g\\) in \\(B\\).</p> <p>As of this writing, values of \\(N\\) greater than \\(1\\) are mostly untested, and it is recommended that this parameter simply be set to \\(1\\) in practice.</p>"},{"location":"usage/#pattern","title":"pattern","text":"<p>The <code>pattern</code> option should be a Perl regular expression that can be used to parse the FASTA sequence header lines of the transcript FASTA files. The following capture groups are expected:</p> Capture group Description 1 \\(k\\)-mer coverage, expressed as a floating-point number 2 Gene ID, a non-negative integer <p>Additional capture groups will be ignored.</p>"},{"location":"usage/#sample-regex","title":"sample-regex","text":"<p>The <code>sample-regex</code> option should be a Python regular expression that can be used to select a string acting as a sample name from the filenames of the FASTA files created for the top \\(n\\) genes.</p> <p>By default, the top \\(n\\) genes for a transcriptome located at <code>SAMPLENAME/transcripts.fasta</code> is <code>SAMPLENAME_top.fasta</code>, so the regular expression <code>^(.*?)_.*$</code> works to select the sample name from this filename.</p> Capture group Description 1 Sample name"},{"location":"usage/#environment-variables","title":"Environment variables","text":"Variable name Description Corresponding argument <code>SAMPLE_RE</code> Python regex used to extract sample names from directory names. <code>--sample-regex</code>"},{"location":"usage/#filtered_distancepy","title":"filtered_distance.py","text":"<p>This script executes the second phase of RNA-seq, in which pairwise similarities or dissimilarities (distances) are computed from the gene matches tables and gene matches graph.</p>"},{"location":"usage/#options_2","title":"Options","text":"Short name Long name Description Default Required <code>-c</code> <code>--comparisons</code> Paths to gene matches tables. Yes <code>-e</code> <code>--embed</code> Start IPython shell after distances have been computed. No <code>-g</code> <code>--graph</code> Path to gene matches graph pickle. Yes <code>-h</code> <code>--help</code> Print a help message and exit. No <code>-l</code> <code>--print-sample-list</code> Print the list of samples before printing the matrices No <code>-o</code> <code>--out-type</code> Output type (similarity or dissimilarity). <code>sim</code> No <code>-s</code> <code>--samples</code> Number of sample in the comparison. (Computed automatically if not specified.) No"},{"location":"usage/#output-format","title":"Output format","text":"<p>The script writes the matrix to standard output in a human-readable format using <code>np.savetxt</code> with the <code>%s</code> format and spaces as delimiters.</p> <p>If the <code>--print-sample-list</code> option is provided, the list of samples will be printed before the matrix.</p>"},{"location":"usage/#find_all_pairspy","title":"find_all_pairs.py","text":"<p>This script calculates the gene matches tables for all pairs of samples by BLASTing each sample against every other.</p>"},{"location":"usage/#options_3","title":"Options","text":"Short name Long name Description Default Required <code>-D</code> <code>--db-cache-dir</code> Directory in which to store BLAST DBs for the input FASTA files No <code>-e</code> <code>--evalue</code> e-value cutoff to use for BLAST searches <code>1e-50</code> (\\(10^(-50)\\)) No <code>-r</code> <code>--gene-regex</code> Python regex used to extract gene and isoform IDs from FASTA sequence headers. <code>^.*g([0-9]+)_i([0-9]+)</code> No <code>-h</code> <code>--help</code> Print a help message and exit. No <code>-i</code> <code>--inputs</code> Input FASTA files, each containing a sample's top \\(n\\) genes Yes <code>-j</code> <code>--jobs</code> Number of parallel jobs to use. <code>threads - 1</code> No <code>-k</code> <code>--keep-all</code> Whether to keep all matches in the case of a tie in the last step of creating the gene matches table. No <code>-n</code> <code>--top-n</code> A match between genes is counted if it is among the top \\(N\\) in both directions. 1 No <code>-O</code> <code>--output-dir</code> Directory in which to store the output gene matches tables Yes <code>-R</code> <code>--sample-regex</code> Python regex used to extract sample names from directory names. <code>^(.*?)_.*$</code> No"},{"location":"usage/#environment-variables_1","title":"Environment variables","text":"Variable name Description Corresponding argument <code>SAMPLE_RE</code> Python regex used to extract sample names from directory names. <code>--sample-regex</code>"},{"location":"usage/#find_homologspy","title":"find_homologs.py","text":"<p>This script computes a genetic distance for a single pair of samples. </p> <p>Warning: This script should not be used if you are analyzing more than two samples total!</p>"},{"location":"usage/#positional-arguments_1","title":"Positional arguments","text":"Argument name Description <code>transcripts1</code> Path to first (top n) transcripts FASTA file to be analyzed. <code>transcripts2</code> Path to second (top n) transcripts FASTA file to be analyzed."},{"location":"usage/#options_4","title":"Options","text":"Short name Long name Description Default Required <code>-e</code> <code>--evalue</code> e-value cutoff to use for BLAST searches <code>1e-50</code> (\\(10^{-50}\\)) No <code>-h</code> <code>--help</code> Print a help message and exit. No <code>-k</code> <code>--keep-all</code> Whether to keep all matches in the case of a tie in the last step of creating the gene matches table. No <code>-q</code> <code>--quiet</code> Don't show the matches found. No <code>-r</code> <code>--regex</code> Python regex used to extract gene and isoform IDs from FASTA sequence headers. <code>^.*g([0-9]+)_i([0-9]+)</code> No <code>-f</code> <code>--report-float</code> Report the distance as a floating point number instead of a fraction. No <code>-n</code> <code>--top-n</code> A match between genes is counted if it is among the top \\(N\\) in both directions. No"},{"location":"usage/#output-format_1","title":"Output format","text":"<p>By default, <code>find_homologs.py</code> prints the gene matches table followed by the distance, expressed as a simplified fraction.</p> <p>The <code>--quiet</code> option may be used to suppress printing the gene matches table, and the <code>--report-float</code> option may be used to express the distance as a floating-point number instead of a fraction.</p>"},{"location":"usage/#make_subsetspy","title":"make_subsets.py","text":"<p>This script creates links to gene matches tables and a gene matches graph for a subset of samples from a previously completed run of RNA-clique (specifically, phase 1 of RNA-clique). <code>make_subsets.py</code> is useful when you want to compute distances for a subset of samples that you've already analyzed with RNA-clique. This script is typically much faster than re-running Phase 1 on a subset of the input FASTA files since this script does not need to repeat any of the BLAST searches from the prior analysis.</p> <p>The symbolic links to the gene matches tables belonging to the subset are placed in an <code>od2</code> subdirectory of the specified output directory. The new gene matches graph is saved in a file named <code>graph.pkl</code> directly under the output directory.</p>"},{"location":"usage/#options_5","title":"Options","text":"Short name Long name Description Default Required <code>-h</code> <code>--help</code> Print a help message and exit. No <code>-O</code> <code>--output-dir</code> Directory in which to store links to subset gene matches tables and graph. Yes <code>-I</code> <code>--input-dir</code> Directory containing gene matches tables in <code>od2</code> subdirectory. Yes <code>-y</code> <code>--include</code> A list of samples to include. If none are provided, the list is not used for selecting a subset. No <code>-Y</code> <code>--include-regex</code> A regular expression that matches samples to include. No <code>-r</code> <code>--sample-name-regex</code> A regular expression for parsing the samples found in gene matches tables into sample names. <code>(.*)_top\\.fasta</code> No <code>--filter-file</code> A file whose lines contain names of samples to include in the subset. No"},{"location":"usage/#sample-name-regex","title":"sample-name-regex","text":"<p>Each gene matches table created in Phase 1 of RNA-clique keeps track of the paths to the files used in the comparison. These are stored in the <code>qsample</code> and <code>ssample</code> columns of each dataframe.</p> <p><code>sample-name-regex</code> is a regular expression used to transform these basenames of the file paths back into sample names. The capture groups of this regular expression are as follows:</p> Capture group Description 1 Sample name <p>Since <code>select_top_sets_all.sh</code> saves the sequences for the top \\(n\\) genes of a sample named <code>$sample_name</code> in a file named <code>${sample_name}_top.fasta</code>, the default setting for this parameter is <code>(.*)_top\\.fasta</code>.</p>"},{"location":"usage/#plot_component_sizespy","title":"plot_component_sizes.py","text":"<p>Despite its name, <code>plot_component_sizes.py</code> offers a variety of features useful for working with gene matches graphs:</p> <ul> <li>Visualizations</li> <li>Component size histogram</li> <li>Represented sample count histogram</li> <li>Sample count to component size ratio KDE plot</li> <li>Component density KDE plot</li> <li>Graphviz export</li> <li>Data export</li> <li>Cytoscape JSON</li> <li>GraphML</li> <li>Statistics</li> <li>Ideal components</li> <li>Large components</li> <li>Total components</li> </ul>"},{"location":"usage/#positional-arguments_2","title":"Positional arguments","text":"Argument name Description <code>graph</code> Path to the pickled gene matches graph."},{"location":"usage/#options_6","title":"Options","text":"Short name Long name Description Default Required <code>-d</code> <code>--density-plot</code> Output path for KDE plot of component density. No <code>-x</code> <code>--export</code> Output path(s) for export to GraphML or Cytoscape JSON. No <code>-g</code> <code>--graphviz</code> Output path for Graphviz (dot) format export. No <code>-h</code> <code>--help</code> Print a help message and exit. No <code>-r</code> <code>--ratio-plot</code> Output path for KDE plot of represented samples divided by component size. No <code>-s</code> <code>--size-plot</code> Output path for histogram of component sizes. No <code>-S</code> <code>--sample-plot</code> Output path for histogram of represented samples. No <code>--samples</code> The number of samples in the analysis. If not specified, this is computed automatically. No <code>--statistics</code> Print statistics in the specified format (human or machine-readable). No"},{"location":"usage/#visualizations","title":"Visualizations","text":"<p><code>plot_component_sizes.py</code> can produce several different plots relating to components of the gene matches graph.</p>"},{"location":"usage/#component-size-histogram","title":"Component size histogram","text":"<p>This plot shows the distribution of sizes among connected components of the gene matches graph.</p> <p>For most sizes, the bar in the histogram is drawn in blue. For the case where the size is exactly the number of samples, the bar is drawn in orange. Since a gene must match some other gene to be included in the gene matches graph, no bar is shown for the case where the size is 1.</p> <p></p>"},{"location":"usage/#represented-sample-count-histogram","title":"Represented sample count histogram","text":"<p>The number of samples represented in a connected component is the number of distinct samples to which genes in the component belong. For a given component, the number of represented samples is necessarily between 1 and the number of samples in the analysis.</p> <p>This plot shows the distribution of number of represented samples among connected components in the gene matches graph.</p> <p>For represented sample counts , the bar in the histogram is drawn in blue. For the case where the represented sample count is exactly the number of samples, the bar is drawn in orange. Since a gene must match some other gene in another sample to be included in the gene matches graph, no bar is shown for the case where the represented sample count is 1.</p> <p></p>"},{"location":"usage/#sample-count-to-component-size-ratio-kde-plot","title":"Sample count to component size ratio KDE plot","text":"<p>This plot shows the distribution of represented samples divided by component size for the components in the gene matches graph. Since this ratio can take on many fractional values, kernel density estimation is used to plot the distribution.</p> <p></p>"},{"location":"usage/#component-density-kde-plot","title":"Component density KDE plot","text":"<p>This plot shows the distribution of component density for the gene matches graph, where density is computed as the number of edges that exist in the component divided by the number of edges that would exist if the component were complete. Since the density can take on many fractional values, kernel density estimation is used to plot the distribution.</p> <p></p>"},{"location":"usage/#graphviz","title":"Graphviz","text":"<p><code>plot_component_sizes.py</code> can optionally export the entire gene matches graph to a Graphviz (\"dot\") file. In principle, this file could be used to draw the full gene matches graph via one of the Graphviz layout programs (e.g., <code>neato</code>, <code>circo</code>, etc.), but, in practice, gene matches graphs are often too large to draw with Graphviz, even for small analyses involving only four samples.</p> <p>The function is included in case plotting some subgraph might be useful. The Graphviz export may also be practical for analyses with only three samples, but this is untested.</p>"},{"location":"usage/#data-exporters","title":"Data exporters","text":""},{"location":"usage/#cytoscape-json","title":"Cytoscape JSON","text":"<p>Export to the <code>cyjs</code> JSON format used by Cytoscape.</p> <p>Currently, this exporter does not appear to function properly, as Cytoscape complains upon importing the graph that \"source node is not a member of the network.\" For now, we recommend using the GraphML export format, which is also understood by Cytoscape.</p>"},{"location":"usage/#example","title":"Example","text":"<pre><code>{\n    \"data\": [],\n    \"directed\": false,\n    \"multigraph\": false,\n    \"elements\": {\n        \"nodes\": [\n            {\n                \"data\": {\n                    \"id\": \"('SRR6847395_out_top.fasta', 6)\",\n                    \"value\": [\n                        \"SRR6847395_out_top.fasta\",\n                        6\n                    ],\n                    \"name\": \"('SRR6847395_out_top.fasta', 6)\"\n                }\n            },\n            {\n                \"data\": {\n                    \"id\": \"('SRR6847395_out_top.fasta', 5289)\",\n                    \"value\": [\n                        \"SRR6847395_out_top.fasta\",\n                        5289\n                    ],\n                    \"name\": \"('SRR6847395_out_top.fasta', 5289)\"\n                }\n            },\n            // ...\n        ],\n        \"edges\": [\n            {\n                \"data\": {\n                    \"source\": [\n                        \"SRR6847395_out_top.fasta\",\n                        6\n                    ],\n                    \"target\": [\n                        \"SRR6847396_out_top.fasta\",\n                        0\n                    ]\n                }\n            },\n            {\n                \"data\": {\n                    \"source\": [\n                        \"SRR6847395_out_top.fasta\",\n                        5289\n                    ],\n                    \"target\": [\n                        \"SRR6847396_out_top.fasta\",\n                        48\n                    ]\n                }\n            },\n            // ...\n        ]\n    }\n}\n</code></pre>"},{"location":"usage/#graphml","title":"GraphML","text":"<p><code>plot_component_sizes.py</code> can export to GraphML, an XML-based format for describing graphs.</p>"},{"location":"usage/#example_1","title":"Example","text":"<pre><code>&lt;?xml version='1.0' encoding='utf-8'?&gt;\n&lt;graphml xmlns=\"http://graphml.graphdrawing.org/xmlns\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\"&gt;\n  &lt;graph edgedefault=\"undirected\"&gt;\n    &lt;node id=\"('SRR6847395_out_top.fasta', 6)\" /&gt;\n    &lt;node id=\"('SRR6847395_out_top.fasta', 5289)\" /&gt;\n    &lt;node id=\"('SRR6847395_out_top.fasta', 1672)\" /&gt;\n    &lt;!-- More nodes here ... --&gt;\n    &lt;edge source=\"('SRR6847395_out_top.fasta', 6)\" target=\"('SRR6847396_out_top.fasta', 0)\" /&gt;\n    &lt;edge source=\"('SRR6847395_out_top.fasta', 5289)\" target=\"('SRR6847396_out_top.fasta', 48)\" /&gt;\n    &lt;edge source=\"('SRR6847395_out_top.fasta', 5289)\" target=\"('SRR6847398_out_top.fasta', 2189)\" /&gt;\n    &lt;!-- More edges here ... --&gt;\n  &lt;/graph&gt;\n&lt;/graphml&gt;\n</code></pre>"},{"location":"usage/#typical_filtering_stepsh","title":"typical_filtering_step.sh","text":"<p>This script wraps <code>do_filtering_step.sh</code> to provide a simpler user interface and better defaults. Like <code>do_filtering_step.sh</code>, the purpose of this script is to automate the first phase of RNA-clique.</p> <p>This script shares many arguments/options with <code>do_filtering_step.sh</code>, but some have been removed or replaced for simplicity.</p>"},{"location":"usage/#positional-arguments_3","title":"Positional arguments","text":"Argument name Description <code>DIR ...</code> Each argument is a directory containing a transcripts FASTA file to be analyzed."},{"location":"usage/#options_7","title":"Options","text":"Short name Long name Description Default Required <code>--evalue</code> e-value cutoff to use for BLAST searches <code>1e-99</code> (\\(10^{-99}\\)) No <code>--gene-regex</code> Python regex used to extract gene and isoform IDs from FASTA sequence headers. <code>^.*g([0-9]+)_i([0-9]+)</code> No <code>-h</code> <code>--help</code> Print a help message and exit. No <code>-j</code> <code>--jobs</code> Number of parallel jobs to use. <code>threads - 1</code> No <code>-N</code> A match between genes is counted if it is among the top \\(N\\) in both directions. 1 No <code>-o</code> <code>--output-dir</code> Directory in which to put intermediate and output files. Yes <code>--pattern</code> Perl regex used to extract \\(k\\)-mer coverage from FASTA sequence header lines. <code>^.*cov_([0-9]+(?:\\.[0-9]+))_g([0-9]+)_i([0-9]+)</code> No <code>--sample-regex</code> Python regex used to extract sample names from directory names. <code>^(.*?)_.*$</code> No <code>-n</code> <code>--top-genes</code> Number of top genes to select by \\(k\\)-mer coverage. Yes <code>--transcripts</code> Name of the FASTA files containing transcirpts in the input directories. <code>transcripts.fasta</code> No"},{"location":"usage/#environment-variables_2","title":"Environment variables","text":"Variable name Description Corresponding argument <code>SAMPLE_RE</code> Python regex used to extract sample names from directory names. <code>--sample-regex</code>"},{"location":"usage/#select_top_setspl","title":"select_top_sets.pl","text":"<p>This Perl script selects the top genes (\"isotig sets\") from an assembled transcriptome by \\(k\\)-mer coverage. </p> <p>See more details in the documentation for select_top_genes.</p>"},{"location":"usage/#select_top_sets_allsh","title":"select_top_sets_all.sh","text":"<p>This Perl script selects the top genes from multiple assembled transcriptomes in parallel.</p> <p>See more details in the documentation for select_top_genes.</p>"},{"location":"installation_guides/macos/","title":"Installing RNA-clique for macOS","text":"<p>This guide will walk you through installing RNA-clique on macOS. Since RNA-clique currently has no graphical interface, basic command-line skills are needed for both installation and use of the software.</p> <p>This guide is designed for macOS Sequoia 15 on Intel Mac, but the steps in this guide have also been tested on macOS Ventura 13 on Intel and macOS Sonoma 14 on Apple Silicon via GitHub Actions runners. The guide likely works on other recent versions of macOS, but such configurations are untested.</p>"},{"location":"installation_guides/macos/#installing-command-line-developer-tools","title":"Installing command line developer tools","text":"<p>Installation requires some commands (e.g., <code>git</code>) that are part of the macOS  command line developer tools, which are not installed by default. To install them, run the following in the Terminal.</p> <pre><code>xcode-select --install\n</code></pre> <p>If the command line developer tools have not been installed already, you should see a graphical dialog prompting you to confirm installation. Click \"Install\"  and agree to the license agreement to begin installation .Wait for the install to complete before continuing.</p>"},{"location":"installation_guides/macos/#download-rna-clique","title":"Download RNA-clique","text":"<p>You can download RNA-clique by cloning its GitHub repository. (Alternatively, you can extract the release zip or tarball, but be mindful that the repository root will have a different name than the one presented here.)</p> <pre><code>git clone --recurse-submodules https://github.com/actapia/rna_clique\n</code></pre>"},{"location":"installation_guides/macos/#installing-homebrew","title":"Installing Homebrew","text":"<p>Homebrew (<code>brew</code>) is a package manager for macOS---it allows the user to install and update software packages via the command line. We will use <code>brew</code> to install some of the dependencies of RNA-clique, but we need to install the package manager itself first.</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> <p>You will most likely need to enter your password to install Homebrew as root. The install script will also ask you to confirm that you want to install the needed software.</p>"},{"location":"installation_guides/macos/#installing-bash","title":"Installing Bash","text":"<p>We will install a few packages using Homebrew.</p> <p>First, we will install Bash, which is a Unix shell. The version of Bash that comes installed on macOS is very out of date, but RNA-clique requires some new features of Bash.</p> <p>Second, we will install NCBI BLAST+, a popular implementation of the BLAST local sequence alignment software.</p> <p>Third, we will install cpanminus`, a Perl package manager that will help us install the Perl dependencies.</p> <pre><code>brew install bash blast cpanminus\n</code></pre>"},{"location":"installation_guides/macos/#installing-gnu-parallel-optional","title":"Installing GNU Parallel (optional)","text":"<p>Some parts of RNA-clique can use GNU Parallel to run multiple jobs  simultaneously. Parallelization can speed up these parts on systems with more than one logical core (\"thread\"). GNU parallel be installed via <code>brew</code>.</p> <pre><code>brew install parallel\n</code></pre>"},{"location":"installation_guides/macos/#installing-bioseqio","title":"Installing Bio::SeqIO","text":"<p>We can use <code>cpan</code> to install the Bio::SeqIO Perl module.</p> <pre><code>sudo cpanm Bio::SeqIO\n</code></pre> <p>macOS may ask you to permit Terminal to access certain files and settings on your computer. You can safely allow Terminal that access.</p>"},{"location":"installation_guides/macos/#installing-arrayheap","title":"Installing Array::Heap","text":"<p>Again, we can use <code>cpan</code>.</p> <pre><code>sudo cpanm Array::Heap\n</code></pre>"},{"location":"installation_guides/macos/#installing-miniconda","title":"Installing Miniconda","text":"<p>The conda package and environment manager will be useful for setting up the Python dependencies of RNA-clique. If you already have a conda installation, you can skip to the next step, Installing the rna-clique conda environment First, download the Miniconda installer:</p> <pre><code>curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-$(uname -m).sh\n</code></pre> <p>Then, run the installer.</p> <pre><code>bash Miniconda3-latest-MacOSX-$(uname -m).sh\n</code></pre> <p>Agree to the license terms. Unless you have a reason to install somewhere else, you can install to the default location Miniconda suggests.</p> <p>When asked about initializing Miniconda for the current shell, say yes.</p> <p>When the installation has finished, you will need to restart your shell.</p>"},{"location":"installation_guides/macos/#installing-the-rna-clique-conda-environment","title":"Installing the rna-clique conda environment","text":"<p>Make sure you are in the <code>rna_clique</code> repository that you cloned with <code>git</code>.</p> <pre><code>cd rna_clique\n</code></pre> <p>Then, create a <code>conda</code> environment from the <code>environment.yml</code> file in the root of the repository.</p> <pre><code>conda env create -f environment.yml --name rna-clique\n</code></pre> <p>When asked to confirm that you want to install the dependencies, say yes.</p> <p>When creation of the new environment has finished, you can activate the environment to ensure you are running Python with the needed dependencies:</p> <pre><code>conda activate rna-clique\n</code></pre>"},{"location":"installation_guides/ubuntu/","title":"Installing RNA-clique for Ubuntu","text":"<p>This guide will walk you through installing RNA-clique on Ubuntu. The guide assumes you have some basic familiarity working with Ubuntu using the command line. The guide is designed for Ubuntu 23.10 and has also been tested on Ubuntu 22.04 and 24.04. The guide likely works on other recent versions of Ubuntu as well, but such configurations are untested.</p>"},{"location":"installation_guides/ubuntu/#installing-dependencies-via-apt","title":"Installing dependencies via APT","text":"<p>We will install some dependencies using Ubuntu's default package manager, APT.</p> <p>First, update the package lists.</p> <pre><code>sudo apt update\n</code></pre> <p>Then, install the first set of packages. The table below describes what we will install.</p> Software Description Git Version control system used by RNA-clique (usually installed by default) wget Command-line utility for downloading files from the web (usually installed by default) NCBI BLAST+ Popular implementation of the BLAST local sequence alignment algorithm <code>build-essential</code> Metapackage containing tools useful for building software , including Perl modules cpanminus Package manager for Perl <pre><code>sudo apt install git wget ncbi-blast+ ncbi-blast+ ncbi-blast+-legacy \\\n                 build-essential cpanminus\n</code></pre> <p>BioPerl can also be installed via APT. The package and its dependencies include many recommendations that we don't need\u2014you can specify <code>--no-install-recommends</code> to avoid installing those.</p> <pre><code>sudo apt install bioperl --no-install-recommends\n</code></pre>"},{"location":"installation_guides/ubuntu/#installing-gnu-parallel-optional","title":"Installing GNU Parallel (optional)","text":"<p>Some parts of RNA-clique can use GNU Parallel to run multiple jobs simultaneously. Parallelization can speed up these parts on systems with more than one logical core (\"thread\"). GNU parallel be installed via APT.</p> <pre><code>sudo apt install parallel\n</code></pre>"},{"location":"installation_guides/ubuntu/#installing-arrayheap","title":"Installing Array::Heap","text":"<p>We will use cpanmius to install the <code>Array::Heap</code> Perl  module, since it isn't available in Ubuntu's default software repositories.</p> <pre><code>sudo cpanm Array::Heap\n</code></pre>"},{"location":"installation_guides/ubuntu/#installing-miniconda","title":"Installing Miniconda","text":"<p>The conda package and environment manager will be useful for setting up the Python dependencies of RNA-clique. If you already have a conda installation, you can skip to the next step, Installing the rna-clique conda environment First, download the Miniconda installer:</p> <pre><code>wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\n</code></pre> <p>Then, run the installer.</p> <pre><code>bash Miniconda3-latest-Linux-x86_64.sh\n</code></pre> <p>Unless you have a reason to install somewhere else, you can install to the default locaton Miniconda suggests.</p> <p>When asked about initializing Miniconda for the current shell, say yes.</p> <p>When the installation has finished, you will need to restart your shell.</p>"},{"location":"installation_guides/ubuntu/#downloading-rna-clique","title":"Downloading RNA-clique","text":"<p>For now, you can download RNA-clique by cloning its GitHub repository. (Alternatively, you can extract the release zip or tarball, but be mindful that the repository root will have a different name than the one presented here.)</p> <pre><code>git clone --recurse-submodules https://github.com/actapia/rna_clique\n</code></pre>"},{"location":"installation_guides/ubuntu/#installing-the-rna-clique-conda-environment","title":"Installing the rna-clique conda environment","text":"<p>Make sure you are in the <code>rna_clique</code> repository that you cloned with <code>git</code>.</p> <pre><code>cd rna_clique\n</code></pre> <p>Then, create a <code>conda</code> environment from the <code>environment.yml</code> file in the root of the repository.</p> <pre><code>conda env create -f environment.yml --name rna-clique\n</code></pre> <p>When asked to confirm that you want to install the dependencies, say yes.</p> <p>When creation of the new environment has finished, you can activate the environment to ensure you are running Python with the needed dependencies:</p> <pre><code>conda activate rna-clique\n</code></pre>"},{"location":"tutorials/reads2tree/","title":"From RNA-seq reads to a phylogenetic tree with RNA-clique","text":"<p>This tutorial explains how to obtain a distance matrix and phylogenetic tree for a set of samples for which we have RNA-seq reads. The purpose of this guide is to show a typical workflow using RNA-clique.</p> <p>The tutorial assumes that RNA-clique has already been downloaded and that its dependencies and conda environment have already been installed.</p>"},{"location":"tutorials/reads2tree/#setup","title":"Setup","text":"<p>In addition to RNA-clique, this tutorial requires the following software:</p> <ul> <li>sratoolkit</li> <li>download_sra</li> <li>SPAdes</li> </ul> <p>This section provides brief installation instructions for each piece of software. More detailed instructions may be found at each program's GitHub repository.</p> <p>It is recommended that the software be downloaded somewhere outside the RNA-clique git repository. For example, you may wish to put the software in your <code>~/Documents</code> directory.</p>"},{"location":"tutorials/reads2tree/#sratoolkit","title":"sratoolkit","text":"<p>Download the appropriate <code>sratoolkit</code> binaries for your system.</p> UbuntumacOS (Intel)macOS (Apple Silicon) <pre><code>wget https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/current/sratoolkit.current-ubuntu64.tar.gz\n</code></pre> <pre><code>curl -L -O https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/current/sratoolkit.current-mac64.tar.gz\n</code></pre> <pre><code>curl -L -O https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/current/sratoolkit.current-mac-arm64.tar.gz\n</code></pre> <p>Then, extract the downloaded tar file.</p> <pre><code>tar xzvf sratoolkit.current-*.tar.gz\n</code></pre> <p>Add the <code>bin</code> directory of the extracted archive to your <code>PATH</code>.</p> <pre><code>export PATH=\"$PATH:$(realpath sratoolkit*/bin)\"\n</code></pre>"},{"location":"tutorials/reads2tree/#download_sra","title":"download_sra","text":"<p>Note</p> <p>If you downloaded this software from Zenodo, the test data SRA files are included in the software release zip. If you don't want to download them yourself, you don't need <code>download_sra</code> and can skip this step.</p> <p>Make sure the <code>rna-clique</code> Conda environment created during the RNA-clique installation is activated.</p> <pre><code>conda activate rna-clique\n</code></pre> <p>Install dependencies for <code>download_sra</code>.</p> <pre><code>conda install lxml requests\n</code></pre> <p>Clone the <code>download_sra</code> Git repository.</p> <pre><code>git clone https://github.com/actapia/download_sra\n</code></pre> <p>Add the repository root to your <code>PATH</code>.</p> <pre><code>export PATH=\"$PATH:$PWD/download_sra\"\n</code></pre>"},{"location":"tutorials/reads2tree/#spades","title":"SPAdes","text":"<p>Note</p> <p>If you downloaded this software from Zenodo, the assembled transcriptomes are included in the release zip. If you don't want to assemble the transcriptomes yourself, you can skip downloading SPAdes.</p> <p>Download the SPAdes assembler. As of this writing, 4.0.0 is the newest version.</p> UbuntumacOS <pre><code>wget https://github.com/ablab/spades/releases/download/v4.0.0/SPAdes-4.0.0-Linux.tar.gz\n</code></pre> <pre><code>curl -L -O https://github.com/ablab/spades/releases/download/v4.0.0/SPAdes-4.0.0-Darwin-$(uname -m).tar.gz\n</code></pre> <p>Extract the archive:</p> <pre><code>tar xzvf SPAdes-*.tar.gz\n</code></pre> <p>Add the SPAdes <code>bin</code> directory to your <code>PATH</code>.</p> <pre><code>export PATH=\"$PATH:$(realpath SPAdes-*/bin)\"\n</code></pre>"},{"location":"tutorials/reads2tree/#creating-a-directory-for-our-work","title":"Creating a directory for our work","text":"<p>We will organize our files for this tutorial nicely into a single directory, but first, we want to keep track of the location of RNA-clique. For this tutorial, we will assume that RNA-clique is located at the path specified in the <code>RNA_CLIQUE</code> environment variable. To set this variable easily, you can <code>cd</code> into the Git repository and run</p> <pre><code>export RNA_CLIQUE=$PWD\n</code></pre> <p>We recommend putting the directory for this tutorial outside of the RNA-clique Git repository. For the rest of this tutorial, we will assume that the tutorial directory is at the path in the <code>TUTORIAL_DIR</code> environment variable. If you are in the root of the Git repository, you could run </p> <pre><code>cd ..\nmkdir tutorial\ncd tutorial\nexport TUTORIAL_DIR=$PWD\n</code></pre>"},{"location":"tutorials/reads2tree/#obtaining-sequence-data","title":"Obtaining sequence data","text":"<p>Note</p> <p>If you downloaded this software from Zenodo, you already have the SRA files in the <code>test_data/sra</code> of the repository. Instead of completing this step, you can extract the provided data by running</p> <pre><code>for f in \"$RNA_CLIQUE/test_data/sra/*\"; do\n    fasterq-dump \"$f\"\ndone\n</code></pre> <p>Note</p> <p>Before proceeding, check that your environment variables are set to the  correct values!</p> <pre><code>echo \"$RNA_CLIQUE\"\necho \"$TUTORIAL_DIR\"\n</code></pre> <p>If either of these does not print a path, you have forgotten to set the appropriate environment variables.</p> <p>We will start out with RNA-seq reads for six samples of tall fescue (Lolium arundinaceum). These samples are a subset of the sixteen used in the paper RNA-clique: A method for computing genetic distances from RNA-seq data. The sample metadata is shown below.</p> SRA Accession Genotype SRR2321388 CTE46 SRR2321385 CTE46 SRR8003761 CTE27 SRR8003762 CTE27 SRR7990321 FATG4 SRR8003736 NTE <p>The list of accessions is in the file <code>tall_fescue_accs.csv</code>. We can download these all easily using the <code>download_sra</code> tool.</p> <p>First, change to your <code>TUTORIAL_DIR</code>.</p> <pre><code>cd \"$TUTORIAL_DIR\"\n</code></pre> <p>Then, run <code>download_sra.sh</code> on the tall fescue accessions. We will use the <code>-j</code> flag to run the download with multiple jobs and the <code>-r</code> flag to remove the SRA files after downloading and extracting.</p> <pre><code>tail -n+2 \"$RNA_CLIQUE/docs/tutorials/reads2tree/tall_fescue_accs.csv\" | \\\n    cut -d, -f1 | download_sra.sh -j 0 -r \n</code></pre> <p>Verify that the FASTQ files have been extracted.</p> <pre><code>ls SRR*.fastq\n</code></pre>"},{"location":"tutorials/reads2tree/#assembling-transcriptomes","title":"Assembling transcriptomes","text":"<p>Note</p> <p>If you downloaded this software from Zenodo, you already have the assembled transcriptomes in the <code>test_data/assemblies/</code> directory in the root of the repository and can simply move them instead of running SPAdes</p> <pre><code>mv \"$RNA_CLIQUE/test_data/assemblies\" out\n</code></pre> <p>Note</p> <p>Assembling the transcriptomes requires at least 16 GB of memory. If you have insufficient memory or otherwise need to skip this step, you can download the assemblies instead:</p> <pre><code>wget \"http://rna-clique-data.s3-website.us-east-2.amazonaws.com/transcripts.zip\"\nmkdir out\nunzip transcripts.zip -d out\n</code></pre> <p>Ordinarily, we would need a quality control step before proceeding to assembly, but we will skip that for this tutorial.</p> <p>We will use the rnaSPAdes mode of the SPAdes assembler to assemble the reads we just downloaded into transcriptomes for each of the six samples. </p> <p>If your computer has sufficient resources, we will perform these assemblies in parallel to save time. We estimate we need 16 GB of memory to assemble one of these transcriptomes with three threads, so we want to run with no more than \\(\u230a m / 16 \u230b\\) jobs, where \\(m\\) is the memory your computer has, in GB. </p> <p>Determining exactly how many jobs and how many threads are optimal requires trial and error; you may need to simply guess how many are appropriate for your computer and retry if you run out of memory.</p> <p>On a computer with over 120 GB of memory, we can run 6 jobs with 3 threads safely.</p> With parallelWithout parallel <pre><code>parallel --jobs 6 spades.py --rna -o out/{/.} -s {} -t 3 -m 120 ::: *.fastq\n</code></pre> <pre><code>for f in *.fastq; do\n    b=\"$(basename \"$f\")\"; \n    fn=\"${b%%.*}\";\n    spades.py --rna -o \"out/$fn\" -s \"$f\" -t 3 -m 120;\ndone\n</code></pre> <p>The assembled transcriptomes will be located at <code>transcripts.fasta</code> in directories corresponding to their samples names under the <code>out</code> directory.</p>"},{"location":"tutorials/reads2tree/#running-phase-1-of-rna-clique","title":"Running phase 1 of RNA-clique","text":"<p>First, return to the RNA-clique repository root.</p> <pre><code>cd \"$RNA_CLIQUE\"\n</code></pre> <p>Then, run <code>typical_filtering_step.sh</code> on the transcriptomes we just assembled. This script will perform \"phase 1\" of RNA-clique, which involves:</p> <ol> <li>Selecting the top \\(n\\) genes for each transcriptome</li> <li>BLASTing each sample's top genes against every other's to get gene matches    tables</li> <li>Building the gene matches graph from the gene matches tables</li> </ol> <p>Previous tests with this data revealed that \\(n = 50000\\) is a good setting, so we will use that value.</p> <pre><code>bash typical_filtering_step.sh -o \"$TUTORIAL_DIR\"/rna_clique_out \\\n                               -n 50000 \\\n                               \"$TUTORIAL_DIR\"/out/*\n</code></pre> <p>Verify that the <code>graph.pkl</code> file was created in the output directory.</p> <pre><code>ls \"$TUTORIAL_DIR/rna_clique_out/graph.pkl\"\n</code></pre>"},{"location":"tutorials/reads2tree/#results","title":"Results","text":""},{"location":"tutorials/reads2tree/#getting-a-tree","title":"Getting a tree","text":"<p>If you want a tree, you can create one using RNA-clique and Biopython. The code below, also found in <code>docs/tutorials/reads2tree/make_tree.py</code>, computes the distance matrix from the <code>graph.pkl</code> and <code>od2/*.h5</code> (or <code>od2/*.pkl</code>) files and constructs a tree using the neighbor-joining algorithm. The tree is also rooted at its midpoint. The tree is saved to <code>nj_tree.tree</code>, and a visualization is saved to <code>nj_tree.svg</code> in the <code>rna_clique_out</code> directory.</p> <pre><code>import os\nimport Bio.Phylo\nimport pandas as pd\nimport matplotlib as mpl\n\nfrom pathlib import Path\nfrom Bio.Phylo.TreeConstruction import DistanceTreeConstructor, DistanceMatrix\nfrom matplotlib import pyplot as plt\nfrom filtered_distance import SampleSimilarity\nfrom phylo_utils import tril_jagged, draw_tree, get_clades, draw_clade_labels\nfrom path_to_sample import path_to_sample\nfrom make_subset import get_table_files\nfrom nice_colorsys import *\nfrom nice_colorsys.rgb255 import rgb255\n\ntutorial_doc_dir = Path(os.environ[\"RNA_CLIQUE\"]) / \"docs/tutorials/reads2tree\"\nrna_clique_out_dir = Path(os.environ[\"TUTORIAL_DIR\"]) / \"rna_clique_out\"\n\ndef main():\n    sample_metadata = pd.read_csv(tutorial_doc_dir / \"tall_fescue_accs.csv\")\n    similarity_computer = SampleSimilarity.from_filenames(\n        rna_clique_out_dir / \"graph.pkl\",\n        list(get_table_files(rna_clique_out_dir / \"od2\"))\n    )\n    nj_tree = DistanceTreeConstructor().nj(\n        DistanceMatrix(\n            [path_to_sample(p) for p in similarity_computer.samples],\n            tril_jagged(similarity_computer.get_dissimilarity_matrix())\n        )\n    )\n    nj_tree.root_at_midpoint()\n    for c in nj_tree.get_nonterminals():\n        c.name = None\n    Bio.Phylo.write(nj_tree, rna_clique_out_dir / \"nj_tree.tree\", \"newick\")\n    clades = dict(get_clades(nj_tree, sample_metadata, \"accession\", \"genotype\"))\n    clade_colors = {\n        l: \"#\" + rgb(*x).to_rgb255().as_hex()\n        for (l, x) in zip(clades, mpl.colormaps.get_cmap(\"tab10\").colors)\n    }\n    draw_tree(nj_tree, clades=clades, colors=clade_colors)\n    draw_clade_labels(plt.gca(), clades, clade_colors)\n    plt.savefig(rna_clique_out_dir / \"nj_tree.svg\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>The script requires some modules found in the root of the RNA-clique repository, so you can run it as follows:</p> <pre><code>PYTHONPATH='.' python docs/tutorials/reads2tree/make_tree.py\n</code></pre>"},{"location":"tutorials/reads2tree/#getting-a-pcoa-plot","title":"Getting a PCoA plot","text":"<p>We can use <code>scikit-bio</code> to create a PCoA plot from our distance matrix. To distinguish points by genotype, we will need to use the metadata for the samples stored at <code>$RNA_CLIQUE/docs/tutorials/reads2tree/tall_fescue_accs.csv</code>.</p> <p>The code below draws a 3D and 2D PCoA plot and stores the results as SVG files in the <code>rna_clique_out</code> directory as <code>pcoa_3d.svg</code> and <code>pcoa_2d.svg</code>, respectively. The code can also be found at <code>docs/tutorials/reads2tree/make_pcoa.py</code>.</p> <pre><code>import os\nfrom pathlib import Path\n\nimport skbio as skb\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n\nfrom filtered_distance import SampleSimilarity\nfrom path_to_sample import path_to_sample\nfrom make_subset import get_table_files\n\ntutorial_doc_dir = Path(os.environ[\"RNA_CLIQUE\"]) / \"docs/tutorials/reads2tree\"\nrna_clique_out_dir = Path(os.environ[\"TUTORIAL_DIR\"]) / \"rna_clique_out\"\n\ndef main():\n    sample_metadata = pd.read_csv(tutorial_doc_dir / \"tall_fescue_accs.csv\")\n    similarity_computer = SampleSimilarity.from_filenames(\n        rna_clique_out_dir / \"graph.pkl\",\n        list(get_table_files(rna_clique_out_dir / \"od2\"))\n    )\n    dis_df = similarity_computer.get_dissimilarity_df().rename(\n        index=path_to_sample,\n        columns=path_to_sample,\n    )\n    # 3D PCoA\n    pcoa_results = skb.stats.ordination.pcoa(\n        skb.DistanceMatrix(dis_df, ids=dis_df.columns)\n    )\n    pcoa_results.plot(\n        df=sample_metadata.set_index(\"accession\"),\n        column=\"genotype\",\n    )\n    plt.savefig(rna_clique_out_dir / \"pcoa_3d.svg\")\n    # 2D PCoA\n    pcoa_results_2d = skb.stats.ordination.pcoa(\n        skb.DistanceMatrix(dis_df, ids=dis_df.columns),\n        number_of_dimensions=2\n    )\n    plt.figure()\n    for g, df in sample_metadata.join(\n            pcoa_results_2d.samples[[\"PC1\",\"PC2\"]],\n            \"accession\"\n    ).groupby(\"genotype\"):\n        plt.scatter(df[\"PC1\"], df[\"PC2\"], label=g)\n    plt.xlabel(\"PC1\")\n    plt.ylabel(\"PC2\")\n    plt.legend()\n    plt.savefig(rna_clique_out_dir / \"pcoa_2d.svg\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>The example can be run as follows from the root of the RNA-clique repository.</p> <pre><code>PYTHONPATH=\".\" python docs/tutorials/reads2tree/make_pcoa.py\n</code></pre>"},{"location":"tutorials/reads2tree/#getting-a-heatmap","title":"Getting a heatmap","text":"<p>We can use the <code>draw_heatmap</code> function of RNA-clique to display a similarity or distance matrix as a heatmap. The function uses the Seaborn <code>heatmap</code> function behind the scenes, and arbitrary arguments given to <code>draw_heatmap</code> will be passed to Seaborn.</p> <p>The code below is also found in <code>docs/tutorials/reads2tree/make_heatmap.py</code>. It draws a heatmap and saves the resulting figure in the <code>rna_clique_out</code> directory as <code>distance_heatmap.svg</code>. </p> <pre><code>import os\nfrom pathlib import Path\n\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n\nfrom filtered_distance import SampleSimilarity\nfrom path_to_sample import path_to_sample\nfrom heatmap import draw_heatmap\nfrom make_subset import get_table_files\n\ntutorial_doc_dir = Path(os.environ[\"RNA_CLIQUE\"]) / \"docs/tutorials/reads2tree\"\nrna_clique_out_dir = Path(os.environ[\"TUTORIAL_DIR\"]) / \"rna_clique_out\"\n\ndef main():\n    sample_metadata = pd.read_csv(tutorial_doc_dir / \"tall_fescue_accs.csv\")\n    similarity_computer = SampleSimilarity.from_filenames(\n        rna_clique_out_dir / \"graph.pkl\",\n        list(get_table_files(rna_clique_out_dir / \"od2\"))\n    )\n    dis_df = similarity_computer.get_dissimilarity_df().rename(\n        index=path_to_sample,\n        columns=path_to_sample,\n    )\n    draw_heatmap(\n        dis_df,\n        sample_metadata=sample_metadata,\n        sample_name_column=\"accession\",\n        order_by=\"genotype\",\n        cmap=\"mako_r\",\n        digit_annot=2, # Show two digits of the distance.\n        draw_group_labels=True, # Label according to genotype.\n        label_padding_x = 0.05,\n        label_padding_y = 0.05\n    )\n    plt.savefig(rna_clique_out_dir / \"distance_heatmap.svg\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>To generate a heatmap using this code, you can run the Python script as follows from the RNA-clique repository root.</p> <pre><code>PYTHONPATH=\".\" python docs/tutorials/reads2tree/make_heatmap.py\n</code></pre>"}]}